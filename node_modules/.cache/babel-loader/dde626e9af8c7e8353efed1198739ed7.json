{"ast":null,"code":"var _jsxFileName = \"/home/divyanshu/nodejs/letsChat/client/src/components/chat/chat.js\";\nimport React, { useState, useEffect } from \"react\"; // import {RouteComponentProps} from \"react-router\";\n\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\nimport './chat.css';\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport Messages from \"../Messages/Messages\";\nimport TextContainer from \"../TextContainer/TextContainer\";\n\nconst Chat = props => {\n  let socket;\n  const [name, setname] = useState('');\n  const [room, setroom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState('');\n  const username = localStorage.getItem(\"username\");\n  const chatroom = props.match.params.name;\n  const ENDPOINT = \"localhost:5000\";\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    setname(username);\n    setroom(chatroom);\n    socket.emit(\"join\", {\n      name: username,\n      room: chatroom\n    }, () => {// this is executed when callback is called in server\n    });\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, chatroom, username]);\n  useEffect(() => {\n    socket.on(\"message\", message => {\n      setMessages([...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, [messages]); //function for sending messsages\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(TextContainer, {\n    users: users,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/divyanshu/nodejs/letsChat/client/src/components/chat/chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","Messages","TextContainer","Chat","props","socket","name","setname","room","setroom","message","setMessage","messages","setMessages","users","setUsers","username","localStorage","getItem","chatroom","match","params","ENDPOINT","emit","off","on","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React ,{ useState, useEffect } from \"react\";\n// import {RouteComponentProps} from \"react-router\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\nimport './chat.css';\nimport InfoBar from \"../InfoBar/InfoBar\"\nimport Input from \"../Input/Input\"\nimport Messages from \"../Messages/Messages\"\nimport TextContainer from \"../TextContainer/TextContainer\"\n\nconst Chat = (props) => {\n    let socket\n    const [name, setname] = useState('');\n    const [room, setroom] = useState('');\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [users, setUsers] = useState('');\n    const username = localStorage.getItem(\"username\");\n    const chatroom = props.match.params.name\n    const ENDPOINT = \"localhost:5000\"\n    useEffect(()=>{\n       \n        socket = io(ENDPOINT)\n        setname(username)\n        setroom(chatroom)\n        socket.emit(\"join\",{name:username,room:chatroom},()=>{\n            // this is executed when callback is called in server\n        })\n\n        return ()=>{\n            socket.emit(\"disconnect\")\n            socket.off()\n            \n        }\n        \n        \n    },[ENDPOINT,chatroom, username])\n\n   useEffect(()=>{\n       socket.on(\"message\",(message)=>{\n           setMessages([...messages, message])\n       })\n       socket.on(\"roomData\", ({ users }) => {\n        setUsers(users);\n      });\n   },[messages]);\n\n   //function for sending messsages\n   const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n        \n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n  console.log(message,messages)\n  \n        \n    \n    \n    return(\n        <div className =\"outerContainer\">\n            <div className = \"container\">\n            <InfoBar room={room} />\n            <Messages messages={messages} name={name} />\n            <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n            </div>\n            <TextContainer users={users}/>\n        </div>\n    )\n}\n export default Chat;"]},"metadata":{},"sourceType":"module"}